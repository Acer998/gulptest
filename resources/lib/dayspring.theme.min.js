// dayspring.locale初始化
(function(namespace) {
    "use strict";

    if (namespace == null) {
        throw new Error("Dayspring can not be loaded, please ensure that the dayspring javascript has been imported to this page.");
    }

    // 主题专用dayspring函数、变量设置
    // 函数：获取DataTable的默认选项
    function getDataTableOption(serverSide,isModal) {
        var _sDom;
        var _pageLength;
        if(isModal) {
            _sDom = "<'row'<'col-md-6 col-sm-6'p><'col-md-6 col-sm-6'>r>t";
            _pageLength = 8;
        }
        else {
            _sDom = "<'row'<'col-md-6 col-sm-6'pil><'col-md-6 col-sm-6 filter'>r>t";
            _pageLength = parseInt(localStorage.pageLength) || 8;//如果localstorage里有pagelength则取，否则为默认值.
        }        
        var option = {
                sDom: _sDom,
                pageLength:_pageLength,
                sPaginationType: "simple_numbers",
                aLengthMenu: [8, 16, 24 ],
                bAutoWidth: false,
                bSort: false,
                bFilterOnEnter: true,
                bColumnIndex: true, // 用于custom插件
                bStateSave: true,
                iStateDuration: -1,
                initComplete: function(settings, json) {
                    $(this).wrap("<div style='overflow-x:auto;'></div>")
                  },
                fnStateSaveParams: function(settings, data) {
                    var _userPageLength = data.length;
                    if(dayspring.localStorageSupport()){
                        localStorage.pageLength = _userPageLength;//从存储回调里找出pagelenth并存到localstorage里.
                    }                    
                    // 判断localStorage或者cookies是否可用
                    var sessionStorageSupported = ("sessionStorage" in window) && window["sessionStorage"] !== null;
                    if (sessionStorageSupported === false) {
                        return;
                    }
                    // 获取画面id
                    var pageId;
                    var result;
                    
                    for (var index = 0; index < document.scripts.length; index++) {
                        result = document.scripts[index].src.match(/[a-z]{2}\d{6}\.min\.js/);
                        if (result == null) {
                            continue;
                        }
                        pageId = result[0];
                        break;
                    }
                    if (pageId == null || pageId.length < 1) {
                        var identifiedJs = $("script[id]");
                        if (identifiedJs.length < 1) {
                            return;
                        }
                        for (var count = 0; count < identifiedJs.length; count++) {
                            result = identifiedJs[count].id.match(/[a-z]{2}\d{6}/);
                            if (result == null) {
                                continue;
                            }
                            pageId = result[0];
                            break;
                        }
                    }
                    if (pageId == null || pageId.length < 1) {
                        return;
                    }
                    pageId = pageId.substr(0, 8);
                    var save = sessionStorage.getItem(pageId) == null ? null : JSON.parse(sessionStorage.getItem(pageId));
                    if (save == null) {
                        return;
                    }
                    data.ext = save;
                    sessionStorage.removeItem(pageId);
                },
                fnStateLoadParams: function(settings, data) {
                    if (data.ext == null) {
                        return;
                    }
                    for (var key in data.ext) {
                        var prop = data.ext[key];
                        var candidateElement = null;
                        if (!$.isArray(prop)) {
                            // 优先查找模态窗口
                            candidateElement = $("modal :input[name='" + key + "']:not(:password):not(button):not(:image):not(:file)");
                            if (candidateElement.length === 1) {
                                if (candidateElement.is(":radio") || candidateElement.is(":checkbox")) {
                                    $("modal :input[name='" + key + "']:not(:password):not(button):not(:image):not(:file)").prop("checked", false);
                                    $("modal :input[name='" + key + "'][value='" + prop + "']:not(:password):not(button):not(:image):not(:file)").prop("checked", true);
                                } else {
                                    candidateElement.val(prop);
                                }
                            } else if (candidateElement.length > 1) {
                                if (candidateElement.is(":radio") || candidateElement.is(":checkbox")) {
                                    $("modal :input[name='" + key + "']:not(:password):not(button):not(:image):not(:file)").prop("checked", false);
                                    $("modal :input[name='" + key + "'][value='" + prop + "']:not(:password):not(button):not(:image):not(:file)").prop("checked", true);
                                }
                             // 模态窗口中未找到的场合，扩大查找范围
                            } else {
                                candidateElement = $(":not(modal) :input[name='" + key + "']:not(:password):not(button):not(:image):not(:file)");
                                if (candidateElement.length === 1) {
                                    if (candidateElement.is(":radio") || candidateElement.is(":checkbox")) {
                                        $(":not(modal) :input[name='" + key + "']:not(:password):not(button):not(:image):not(:file)").prop("checked", false);
                                        $(":not(modal) :input[name='" + key + "'][value='" + prop + "']:not(:password):not(button):not(:image):not(:file)").prop("checked", true);
                                    } else {
                                        candidateElement.val(prop);
                                    }
                                } else if (candidateElement.length > 1) {
                                    if (candidateElement.is(":radio") || candidateElement.is(":checkbox")) {
                                        $(":not(modal) :input[name='" + key + "']:not(:password):not(button):not(:image):not(:file)").prop("checked", false);
                                        $(":not(modal) :input[name='" + key + "'][value='" + prop + "']:not(:password):not(button):not(:image):not(:file)").prop("checked", true);
                                    }
                                }
                            }
                        } else {
                            // 优先查找模态窗口
                            candidateElement = $("modal :checkbox[name='" + key + "']");
                            if (candidateElement.length > 1) {
                                for (var index = 0; index < prop.length; index++) {
                                    $("modal :checkbox[name='" + key + "']").prop("checked", false);
                                    $("modal :checkbox[name='" + key + "'][value='" + prop[index] + "']").prop("checked", true);
                                }
                            // 模态窗口中未找到的场合，扩大查找范围
                            } else {
                                for (var index = 0; index < prop.length; index++) {
                                    $(":not(modal) :checkbox[name='" + key + "']").prop("checked", false);
                                    $(":not(modal) :checkbox[name='" + key + "'][value='" + prop[index] + "']").prop("checked", true);
                                }
                            }
                        }
                    }
                },
                oLanguage: {
                    oPaginate: {
                        sNext: namespace.locale["S001"],
                        sPrevious: namespace.locale["S002"]
                    },
                    sEmptyTable: namespace.locale["S003"],
                    sInfo: namespace.locale["S004a"],
                    sInfoEmpty: namespace.locale["S005a"],
                    sInfoFiltered: namespace.locale["S006"],
                    sLengthMenu: namespace.locale["S007a"],
                    sLoadingRecords: namespace.locale["S008"],
                    sProcessing: "",
                    sSearch: "",
                    sSearchPlaceholder: namespace.locale["S009"],
                    sZeroRecords: namespace.locale["S010"]
                }
        };
        if (serverSide) {
            option.bProcessing = true;
            option.bServerSide = true;
            option.searchDelay = 1000;
        }        
        return option;
    }

    //  函数：获取Select2的默认选项
    function getSelect2Option() {
        var option = {
                formatMatches: function (matches) { return "有 " + matches + " 条可用结果，请使用上下箭头进行导航"; },
                formatNoMatches: function () { return "未匹配到符合条件的记录"; },
                formatInputTooShort: function (input, min) { var n = min - input.length; return "请输入 " + n + " 个或更多字符"; },
                formatInputTooLong: function (input, max) { var n = input.length - max; return "请删除 " + n + " 个字符"; },
                formatSelectionTooBig: function (limit) { return "您仅能选择 " + limit + " 个选项"; },
                formatLoadMore: function (pageNumber) { return "正在读取更多结果……"; },
                formatSearching: function () { return "正在查询……"; },
        };
        return option;
    }

    // 函数：获取DatePicker的默认选项
    function getDatePickerOption() {
        var option = {
                format: "yyyy-mm-dd",
                autoclose: true,
                todayHighlight: true,
                language: "zh-CN",
                startDate: "1900-01-01"
        };
        return option;
    }

    // 函数：获取TimePicker的默认选项
    function getTimePickerOption() {
        var option = {
                showMeridian: false,
                defaultTime: false,
                showInputs: false
        };
        return option;
    }

    // 函数：获取Validation的默认选项
    function getValidationOption() {
        var option = {
                onsubmit: false,
                onfocusout: false,
                ignore: "input[type='hidden']",
                ignoreClassRules: true,
                ignoreAttributeRules: true,
                errorPlacement: function(error, element) {
                    if (element.parent().hasClass("input-group")) {
                        error.appendTo(element.parent().parent());
                    } else {
                        error.appendTo(element.parent());
                    }
                }
        };
        return option;
    }

    // 函数：获取SlimScroll的默认选项
    function getSlimScrollOption(height) {
        var option = {
                height: height,
                alwaysVisible: false
        }
        return option;
    }

    // 函数：获取blockUI的默认选项
    function getBlockOption() {
        var option = {
                message: '<div class="sk-spinner sk-spinner-wave"><div class="sk-rect1" style="margin-right: 3px"></div><div class="sk-rect2" style="margin-right: 3px"></div><div class="sk-rect3" style="margin-right: 3px"></div><div class="sk-rect4" style="margin-right: 3px"></div><div class="sk-rect5" style="margin-right: 3px"></div></div>',
                css: { backgroundColor: "transparent", border: "0px" },
                baseZ: 100000
        };
        return option;
    }
    
    // 函数：获取FileInput的默认选项
    function getFileInputOption() {
        var option = {
                language: "zh",
                maxFileSize: 20480,
                maxFileCount: 1,
                browseClass: "btn btn-primary",
                uploadClass: "btn btn-success",
                removeClass: "btn btn-white",
                allowedFileExtensions: ["jpg", "jpeg", "gif", "png", "pdf", "doc", "docx", "xls", "xlsx"],
                showUpload: false,
                previewFileType: "any"
        };
        return option;
    }

    // 函数：显示成功消息
    function showSuccess(key, params) {
        var message = namespace.getMessage(key, namespace.locale["S011"]);
        if (arguments.length > 1) {
            message = namespace.formatString(message, params);
        }
        if (toastr == null) {
            if (console && console.warn) {
                console.warn("Toastr can not be loaded, please ensure that the toastr plugin has been imported to this page.");
            }
            alert(message);
        } else {
            toastr.success(message);
        }
    }

    // 函数：显示一般消息
    function showInfo(key, params) {
        if (toastr == null) {
            if (console && console.warn) {
                console.warn("Toastr can not be found, please ensure that the toastr plugin has been imported to this page.");
            }
            return;
        }
        var message = namespace.getMessage(key);
        if (message == "") {
            return;
        }
        if (arguments.length > 1) {
            message = namespace.formatString(message, params);
        }
        toastr.info(message);
    }

    // 函数：显警告消息
    function showWarning(key, params) {
        var message = namespace.getMessage(key, namespace.locale["S012"]);
        if (arguments.length > 1) {
            message = namespace.formatString(message, params);
        }
        if (toastr == null) {
            if (console && console.warn) {
                console.warn("Toastr can not be found, please ensure that the toastr plugin has been imported to this page.");
            }
            alert(message);
        } else {
            toastr.warning(message);
        }
    }

    // 函数：显警告消息
    function showError(key, params) {
        var message = namespace.getMessage(key, namespace.locale["S013"]);
        if (arguments.length > 1) {
            message = namespace.formatString(message, params);
        }
        if (toastr == null) {
            if (console && console.warn) {
                console.warn("Toastr can not be found, please ensure that the toastr plugin has been imported to this page.");
            }
            alert(message);
        } else {
            toastr.error(message);
        }
    }

    // 函数：显示导入文件处理消息
    function showImportMessages(messages) {
        var defaults = {
                title: "导入结果",
                text: messages,
                confirmButtonColor: "#1c84c6",
                confirmButtonText: dayspring.locale["S017"],
                customClass: "importClass"
        };
        swal(defaults);
    }

    // 函数：显示导入文件处理消息带回调
    function showImportMessagesCallback(messages, fn, timer, title) {    	    	
        var defaults = {
                title: (title == null) ? "导入结果" : title,
                text: messages,
                confirmButtonColor: "#1c84c6",
                confirmButtonText: dayspring.locale["S017"],                
                customClass: "importClass"
        };
        if(timer) defaults.timer = timer;
        swal(defaults, fn);
    }

    // 函数：处理远程通信异常
    function handleRemoteError(data, status, errorThrow) {
        if (data == null || data.status == null) {
            showError("S014");
            return;
        }
        if (data.status == "500" && data.responseText != null && data.responseText.indexOf("<html>") == -1) {
            var message = JSON.parse(data.responseText).error;
            if (toastr == null) {
                if (console && console.warn) {
                    console.warn("Toastr can not be found, please ensure that the toastr plugin has been imported to this page.");
                }
                alert(message);
            } else {
                toastr.error(message);
            }
        } else if (data.status == "403") {
            namespace.getView(namespace.getContextPath() + "/user/login");
        } else {
            showError(data.status);
        }
    }
    
    Date.prototype.Format=function(fmt) {         
        var o = {         
        "M+" : this.getMonth()+1, //月份         
        "d+" : this.getDate(), //日         
        "h+" : this.getHours()%12 == 0 ? 12 : this.getHours()%12, //小时         
        "H+" : this.getHours(), //小时         
        "m+" : this.getMinutes(), //分         
        "s+" : this.getSeconds(), //秒         
        "q+" : Math.floor((this.getMonth()+3)/3), //季度         
        "S" : this.getMilliseconds() //毫秒         
        };         
        var week = {         
        "0" : "/u65e5",         
        "1" : "/u4e00",         
        "2" : "/u4e8c",         
        "3" : "/u4e09",         
        "4" : "/u56db",         
        "5" : "/u4e94",         
        "6" : "/u516d"        
        };         
        if(/(y+)/.test(fmt)){         
            fmt=fmt.replace(RegExp.$1, (this.getFullYear()+"").substr(4 - RegExp.$1.length));         
        }         
        if(/(E+)/.test(fmt)){         
            fmt=fmt.replace(RegExp.$1, ((RegExp.$1.length>1) ? (RegExp.$1.length>2 ? "/u661f/u671f" : "/u5468") : "")+week[this.getDay()+""]);         
        }         
        for(var k in o){         
            if(new RegExp("("+ k +")").test(fmt)){         
                fmt = fmt.replace(RegExp.$1, (RegExp.$1.length==1) ? (o[k]) : (("00"+ o[k]).substr((""+ o[k]).length)));         
            }         
        }         
        return fmt;         
    }
    function setCookie(name,value)
    {
        var Days = 30;
        var exp = new Date();
        exp.setTime(exp.getTime() + Days*24*60*60*1000);
        document.cookie = name + "="+ escape (value) + ";expires=" + exp.toGMTString();
    }
    function getCookie(name)
    {
        var arr,reg=new RegExp("(^| )"+name+"=([^;]*)(;|$)");
        if(arr=document.cookie.match(reg))
            return unescape(arr[2]);
        else
            return null;
    }
    function delCookie(name)
    {
        var exp = new Date();
        exp.setTime(exp.getTime() - 1);
        var cval=getCookie(name);
        if(cval!=null)
            document.cookie= name + "="+cval+";expires="+exp.toGMTString();
    }
    namespace.getDataTableOption = getDataTableOption;
    namespace.getDatePickerOption = getDatePickerOption;
    namespace.getTimePickerOption = getTimePickerOption;
    namespace.getSelect2Option = getSelect2Option;
    namespace.getValidationOption = getValidationOption;
    namespace.getSlimScrollOption = getSlimScrollOption;
    namespace.getBlockOption = getBlockOption;
    namespace.getFileInputOption = getFileInputOption;
    namespace.showSuccess = showSuccess;
    namespace.showInfo = showInfo;
    namespace.showWarning = showWarning;
    namespace.showError = showError;
    namespace.handleRemoteError = handleRemoteError;
    namespace.showImportMessages = showImportMessages;
    namespace.showImportMessagesCallback = showImportMessagesCallback;
    namespace.setCookie = setCookie;
    namespace.getCookie = getCookie;
    namespace.delCookie = delCookie;
    // 函数：处理菜单栏
    function handleTopMenu() {
        // TODO
    }

    // 函数：处理侧边栏状态
    function handleSideBar() {
        var $sideBar = $(".sidebar-collapse");
        var $breadcrumb = $(".breadcrumb li");
        if ($sideBar.lenght < 1 || $breadcrumb.length < 1) {
            return;
        }
        var $navigator;
        var navContent;
        for (var index = 0; index < ($breadcrumb.length > 2 ? 2 : $breadcrumb.length); index++) {
            $navigator = $($breadcrumb[index]);
            navContent = $.trim($navigator.find("a").length > 0 ? $navigator.find("a").text() : $navigator.text());
            $sideBar.find("a").each(function() {
                if ($.trim($(this).text()) == navContent) {
                    $(this).parent().addClass("active");
                }
            });
        }
    }

    // 函数：处理消息栏
    function handleMessageBar() {
        if (toastr == null) {
            return;
        }
        toastr.options = {
                "closeButton": true,
                "debug": false,
                "progressBar": true,
                "positionClass": "toast-bottom-full-width",
                "onclick": null,
                "showDuration": "400",
                "hideDuration": "1000",
                "timeOut": "7000",
                "extendedTimeOut": "1000",
                "showEasing": "swing",
                "hideEasing": "linear",
                "showMethod": "fadeIn",
                "hideMethod": "fadeOut"
            };
    }

    // 函数：处理可折叠控件
    function handleCollapsibleController() {
        $(".control-collapse-link").click(function () {
            var button = $(this).parent("span");
            var target = button.prev("textarea");
            var mark = $(this).find("i");
            target.slideToggle(200);
            mark.toggleClass("fa-chevron-up").toggleClass("fa-chevron-down");
            button.toggleClass("").toggleClass("input-group-addon-left");
        });
    }

    // 函数：处理DataTables的Ajax请求
    function handleDataTablesXhr() {
        if ($.blockUI == null || $.unblockUI == null || $("table").length < 1) {
            return;
        }
        $(document).delegate("table", "preXhr.dt", function(e, settings, json) {
            $.blockUI(getBlockOption());
        });
        $(document).delegate("table", "xhr.dt", function(e, settings, json) {
            $.unblockUI();
        });
    }

    // 函数：处理重置按钮
    function handleResetButton() {
        $(".btn-reset").click(function() {
            var forms = $(this).closest("form");
            if (forms.length > 0) {
                forms[0].reset();
            }
        });
    }

    // 函数：处理任务菜单
    function handleTaskMenu() {

        if (!location.href.match(/overviews$/)) {

            if ($("#taskmenu-templet").length > 0) {
                var topmenu = dayspring.getValueInLocal("_TOP_MENU");
                var taskcount = dayspring.getValueInLocal("_TOP_MENU_TASK_CNT");

                var hHtml = template("taskmenu-templet", { list : topmenu });
                $("#taskmenu-placeholder").html(hHtml);
                if (taskcount != null
                    && taskcount != "&nbsp;0&nbsp;") {
                    $("#taskcount").html(taskcount);
                    $("#taskcount").css("visibility", "visible");
                }
            }

            if ($("#exceptionmenu-templet").length > 0) {
                var topmenuException = dayspring.getValueInLocal("_TOP_MENU_EXCEPTION");
                var exceptioncount = dayspring.getValueInLocal("_TOP_MENU_EXCEPTION_CNT");
                if (exceptioncount != null
                    && exceptioncount != "&nbsp;0&nbsp;") {
                    $("#exceptioncount").html(exceptioncount);
                    $("#exceptioncount").css("visibility", "visible");
                }
                var hHtml = template("exceptionmenu-templet", { list : topmenuException });
                $("#exceptionmenu-placeholder").html(hHtml);
            }
        }
    }

    // 函数：处理tooptips
    function handleToolTips() {
        $("[data-toggle='tooltip']").tooltip();
    }
    
    // 函数：禁用所有form submit
    function handleDisabledSubmit() {
        $("form").submit(function() {
            return false;
        });
    }

    function handleImageButton() {
        $(".imgbutton")
            .mouseover(function() { 
                var src = $(this).attr("src").match(/[^\.]+/) + "_2.png";
                $(this).attr("src", src);
            })
            .mouseout(function() {
                var src = $(this).attr("src").replace("_2.png", ".png");
                $(this).attr("src", src);
        });
    }

    // 函数：处理页面初始化
    function handlePageInitialization() {
        // handleSideBar();
        handleMessageBar();
        handleCollapsibleController();
        handleDataTablesXhr();
        handleResetButton();
        handleTaskMenu();
        handleToolTips();
        handleDisabledSubmit();
        handleImageButton();
    }

    handlePageInitialization();

    //手机端顶部导航及左侧菜单样式补丁
    function responsiveNavSidebar(){
        $(".navbar-toggle").click(function(){
            var navLeft = $(".navbar-static-side").css("left");
            if(navLeft != "0px"){
                $(".navbar-static-side").css("left","0px");
                $(".nav_mask").css("display","block");
            }
            else{
                $(".navbar-static-side").css("left","-220px");
                $(".nav_mask").css("display","none");
            }
        })

        $(".nav_mask").click(function(e){
            var navLeft = $(".navbar-static-side").css("left");
            if(navLeft == "0px"){
                $(".navbar-static-side").css("left","-220px");
                $(".nav_mask").css("display","none");
            }
            e.stopPropagation();
        })

        $(".navbar-static-side").click(function(e){
            e.stopPropagation();
        }) 
    }
    
    responsiveNavSidebar();

    if($.fn.metisMenu){
        $("#side-menu").metisMenu();
        function menuActiveHandle(){
            var activePage = $.trim($(".breadcrumb").find(".activeMenu").text());
            var menuTitle;
            $(".has-sub").each(function(i,j){
                menuTitle = $.trim($(j).find("a").eq(0).text());
                if(menuTitle == activePage){
                    $(this).addClass("active");
                    $(this).find("ul").addClass("in");
                }
            })
        }
        menuActiveHandle();
    }

    function modalAddReset(){
        $("<a href='javascript:;' class='btn btn-white reset-modal'>重置</a>").appendTo($(".modal-footer").find("div").find("div"));
        $("form").on("click",".reset-modal",function(){
            $(this).closest("form")[0].reset();
        });
    }
    modalAddReset();

})(dayspring);

//jQuery扩展
$.fn.alert = function(options, callback) {
    var method;
    if (callback == null) {
        if (options == null || !$.isFunction(options)) {
            return;
        }
        method = options;
        options = null;
    } else {
        if (!$.isFunction(callback)) {
            return;
        }
        method = callback;
    }
    var defaults = {
            title: dayspring.locale["S015"],
            text: dayspring.locale["S016"],
            type: "warning",
            showCancelButton: true,
            confirmButtonColor: "#dd6B55",
            confirmButtonText: dayspring.locale["S017"],
            cancelButtonText: dayspring.locale["S018"]
        };
    if (options == null) {
        defaults.title = $(this).attr("data-alert-title") || defaults.title
        defaults.text = $(this).attr("data-alert-text") || defaults.text;
        defaults.showCancelButton = $(this).attr("data-alert-cancelable") ? $(this).attr("data-alert-cancelable") === "true" : defaults.showCancelButton;
    } else {
        $.extend(defaults, options);
    }
    if (window.swal == null) {
        var result = confirm(defaults.text);
        if (result) {
            method.call(this);
        }
    } else {
        swal(defaults, method);
    }
}